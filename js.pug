-
  // Object.freeze(DATA);
  // Object.freeze(CONFIG);

  /**
   * @func
   * @param {string} props.place
   * @param {string} props.source
   * @param {target} props.target
   * else @params are taken from global
   * @return {string} utm
   */
  function utm(props) {
    // utm places map
    const uPlaces = {
      header: 'header',
      body: 'body',
      footer: 'footer',
    }
    Object.freeze(uPlaces);
    // Defaults
    props = props || {};
    props.date = props.date || CONFIG.date;
    props.date += '2017_';
    // props.date = CONFIG.dateFlag ? props.date : '';
    props.task = props.task || CONFIG.task;
    props.lang = props.lang || DATA.lang;
    props.place = props.place || uPlaces.body;
    props.source = props.source || 'button';
    props.target = props.target || 'index';
    props.type = CONFIG.type;
    props.emailSource = props.emailSource || CONFIG.source.ems.utm;

    if (props.type === 'triger' || props.type === 'mercedes') {
      props.date = '';
    }
    if(uPlaces[props.place] === undefined) { throw new Error("Enter correct option place from ['header', 'body', 'footer']" )}

    let utm = `?utm_source=${props.emailSource}&utm_medium=email&utm_content=${props.type}_${props.date}${props.task}_${props.place}_${props.source}_${props.target}&utm_campaign=${props.lang}_rtrg`;

    return utm;
  }

  /**
   * @func get site.com instead income https://site.com
   * @return {string} link to personal area
   */
  String.prototype.my = function() {
    var dataFormated = this.replace('https:\/\/', '');
    var patt = new RegExp('\/$');
    if (patt.test(dataFormated)) {
      dataFormated = dataFormated.replace(/\/$/, '');
    }
    return "https://my." + dataFormated;
  };

  /**
   * Replace text with another text or link
   * @property {string} itemsToReplace.replace — this you want to replace
   * @property {string} itemsToReplace.to — replace by this
   * @property {string} itemsToReplace.link — link hreaf (if you want to add link)
   * @return {string} data — formatted data
   */

  String.prototype.change = function(...itemsToReplace) {
    var data = this.normalize();
    itemsToReplace.forEach(item => {
      if (item.link && !item.to) {
        item.to = `<a class="link" target="_blank" href="${item.link}">${item.replace}</a>`;
      } else if (item.link && item.to) {
        item.to = `<a class="link" target="_blank" href="${item.link}">${item.to}</a>`;
      }
      if (item.flag) {
        item.replace = new RegExp(item.replace, item.flag)
      }
      // if (!item.replace && (!item.to || !item.link )) {
      //   throw new Error("ERROR \n enter correct args: \n @property {string} replace \n @property {string} to \n Example: {replace: 'abc', to: 'bca'} OR {replace: 'abc', link: 'https://yandex.com'}");
      // }
      data = data.replace(item.replace, item.to);
    })
    return data;
  }

  /**
   * Replace relative link path to UTM target
   * example '/promo/lol/what' => 'promo-lol-what'
   * @return {string} correct UTM target
   */
  String.prototype.utmTgNormalize = function() {
    return this.slice(1).split('/').join('-');
  }